services:
  frontend:
    build:
      context: ./frontend
      dockerfile: frontend.Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=${API_URL:-http://localhost:8080}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: backend.Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILE}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/${DB_NAME}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_INITIALIZATION_MODE=always
      - SPRING_SQL_INIT_MODE=always
      - SPRING_SQL_INIT_PLATFORM=postgresql
      - SPRING_JPA_HIBERNATE_DDL-AUTO=none
    env_file:
      - .env
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - app-network
    volumes:
      - ./backend/src/main/resources/data.sql:/app/data.sql

  db:
    image: postgres:17-alpine
    container_name: postgresql_backend_1
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d myapp_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge