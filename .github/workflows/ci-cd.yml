name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04

    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SPRING_PROFILE: ${{ secrets.SPRING_PROFILE }}
      API_URL: ${{ secrets.API_URL }}

    services:
      db:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U $DB_USERNAME -d $DB_NAME"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        ports:
          - 5432:5432
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Image
        run: |
          docker build -f ./backend/backend.Dockerfile -t myapp/backend:latest ./backend
          docker push myapp/backend:latest

      - name: Build and Push Frontend Image
        run: |
          docker build -f ./frontend/frontend.Dockerfile -t myapp/frontend:latest ./frontend
          docker push myapp/frontend:latest

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Run Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d --build
          docker-compose -f docker-compose.yml ps
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SPRING_PROFILE: ${{ secrets.SPRING_PROFILE }}
          API_URL: ${{ secrets.API_URL }}

      - name: Run Tests (Backend)
        run: |
          docker-compose -f docker-compose.yml exec backend mvn test

      - name: Run Tests (Frontend)
        run: |
          docker-compose -f docker-compose.yml exec frontend npm test -- --watchAll=false

      - name: Tear Down Docker Compose
        if: always()
        run: docker-compose -f docker-compose.yml down --volumes --remove-orphans