name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04

    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SPRING_PROFILE: ${{ secrets.SPRING_PROFILE }}
      API_URL: ${{ secrets.API_URL }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create .env file
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "SPRING_PROFILE=${{ secrets.SPRING_PROFILE }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Run Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d --build
          docker-compose -f docker-compose.yml ps
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SPRING_PROFILE: ${{ secrets.SPRING_PROFILE }}
          API_URL: ${{ secrets.API_URL }}

      - name: Run Tests (Backend)
        run: |
          docker-compose -f docker-compose.yml exec backend mvn test

      - name: Run Tests (Frontend)
        run: |
          docker-compose -f docker-compose.yml exec frontend npm test -- --watchAll=false

      - name: Tear Down Docker Compose
        if: always()
        run: docker-compose -f docker-compose.yml down --volumes --remove-orphans

#      - name: Wait for DB to be ready
#        run: |
#          until nc -z db 5432; do
#            echo "Waiting for PostgreSQL to be available..."
#            sleep 1
#          done
#
#          until PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h db -U ${{ secrets.DB_USERNAME }} -d ${{ secrets.DB_NAME }} -c "SELECT 1;" > /dev/null 2>&1; do
#            echo "Waiting for PostgreSQL to be ready..."
#            sleep 1
#          done
#          echo "PostgreSQL is available"

#      - name: Build and Push Backend Image
#        run: |
#          docker build -f ./backend/backend.Dockerfile -t minusemp892/myapp/backend:latest ./backend
#          docker push minusemp892/myapp/backend:latest
#
#      - name: Build and Push Frontend Image
#        run: |
#          docker build -f ./frontend/frontend.Dockerfile -t minusemp892/myapp/frontend:latest ./frontend
#          docker push minusemp892/myapp/frontend:latest
#
#      - name: Run Docker Compose
#        run: |
#          docker-compose -f docker-compose.yml up -d --build
#          docker-compose -f docker-compose.yml ps
#        env:
#          DB_NAME: ${{ secrets.DB_NAME }}
#          DB_USERNAME: ${{ secrets.DB_USERNAME }}
#          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#          SPRING_PROFILE: ${{ secrets.SPRING_PROFILE }}
#          API_URL: ${{ secrets.API_URL }}
#
#      - name: Run Tests (Backend)
#        run: |
#          docker-compose -f docker-compose.yml exec backend mvn test
#
#      - name: Run Tests (Frontend)
#        run: |
#          docker-compose -f docker-compose.yml exec frontend npm test -- --watchAll=false
#
#      - name: Tear Down Docker Compose
#        if: always()
#        run: docker-compose -f docker-compose.yml down --volumes --remove-orphans