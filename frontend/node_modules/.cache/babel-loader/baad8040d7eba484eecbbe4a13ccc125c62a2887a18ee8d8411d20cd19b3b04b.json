{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\projects\\\\tools-config-app\\\\frontend\\\\src\\\\screens\\\\SalariesScreen.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport SalariesService from \"../services/SalariesService\";\nimport DataTable from \"react-data-table-component\";\nimport { Divider, Paper, Tooltip, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SalariesScreen = () => {\n  _s();\n  var _salaries$;\n  const navigate = useNavigate();\n  const [salaries, setSalaries] = useState([]);\n  useEffect(() => {\n    fetchSalaries();\n  }, []);\n  const fetchSalaries = () => {\n    SalariesService.getAllSalaries().then(response => {\n      setSalaries(response.data);\n    }).catch(e => {\n      console.error(e);\n    });\n  };\n  const createTooltipColumn = (name, selector) => {\n    return {\n      name: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"primary\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 19\n      }, this),\n      cell: row => /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: selector(row),\n        arrow: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          noWrap: true,\n          children: selector(row)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this),\n      sortable: true\n    };\n  };\n  const columns = [createTooltipColumn('Name', row => {\n    var _row$data$;\n    return (_row$data$ = row.data[0]) === null || _row$data$ === void 0 ? void 0 : _row$data$.employee;\n  })\n  // {\n  //     name: <Typography variant=\"body1\" color=\"primary\">Amount</Typography>,\n  //     cell: (row: ISalaryData) => (\n  //         <Typography variant=\"body2\" noWrap>\n  //             {row.amount} {currencyCode}\n  //         </Typography>\n  //     ),\n  //     sortable: true,\n  // },\n  // {\n  //     name: <Typography variant=\"body1\" color=\"primary\">Recurring</Typography>,\n  //     cell: (row: ISalaryData) => (\n  //         <Typography variant=\"body2\" noWrap>\n  //             {row.recurring ? 'Yes' : 'No'}\n  //         </Typography>\n  //     ),\n  //     sortable: true,\n  // },\n  // {\n  //     name: <Typography variant=\"body1\" color=\"primary\">Recurrence Period</Typography>,\n  //     selector: row => row.recurrencePeriod,\n  //     sortable: true,\n  // },\n  // {\n  //     name: <Typography variant=\"body1\" color=\"primary\">Date</Typography>,\n  //     selector: row => row.date,\n  //     cell: (row: ISalaryData) => (\n  //         <Typography variant=\"caption\">\n  //             {format(new Date(row.date), 'PPP p')}\n  //         </Typography>\n  //     ),\n  //     sortable: true,\n  // },\n  // {\n  //     name: <Typography variant=\"body1\" color=\"primary\">Options</Typography>,\n  //     cell: (row: ISalaryData) => (\n  //         <Box sx={{mt: 1, mb: 1, display: 'flex', flexDirection: 'column', gap: '8px'}}>\n  //             <Button\n  //                 variant=\"contained\"\n  //                 color=\"primary\"\n  //                 onClick={() => handleEdit(row)}\n  //                 size=\"small\"\n  //                 startIcon={<EditIcon/>}\n  //             >\n  //                 Edit\n  //             </Button>\n  //             <Button\n  //                 variant=\"contained\"\n  //                 color=\"primary\"\n  //                 onClick={() => handleDelete(row)}\n  //                 size=\"small\"\n  //                 startIcon={<DeleteIcon/>}\n  //             >\n  //                 Delete\n  //             </Button>\n  //         </Box>\n  //     ),\n  //     style: {\n  //         minWidth: '140px',\n  //     },\n  // }\n  ];\n  console.log(salaries);\n  console.log(salaries[0].data.length);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        padding: 3,\n        marginTop: 3,\n        marginLeft: 'auto',\n        marginRight: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"button\",\n        display: \"block\",\n        gutterBottom: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          component: \"span\",\n          sx: {\n            color: \"error.main\"\n          },\n          children: 'No salaries added yet.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n        columns: columns,\n        data: salaries,\n        pagination: true,\n        expandableRows: true\n        // expandableRowsComponent={ExpandedIncomesDetails}\n      }, (_salaries$ = salaries[0]) === null || _salaries$ === void 0 ? void 0 : _salaries$.data.length, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(SalariesScreen, \"RD/LkIIz2dEUccMJOrXfVNsDMPY=\", false, function () {\n  return [useNavigate];\n});\n_c = SalariesScreen;\nexport default SalariesScreen;\nvar _c;\n$RefreshReg$(_c, \"SalariesScreen\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","SalariesService","DataTable","Divider","Paper","Tooltip","Typography","jsxDEV","_jsxDEV","Fragment","_Fragment","SalariesScreen","_s","_salaries$","navigate","salaries","setSalaries","fetchSalaries","getAllSalaries","then","response","data","catch","e","console","error","createTooltipColumn","name","selector","variant","color","children","fileName","_jsxFileName","lineNumber","columnNumber","cell","row","title","arrow","noWrap","sortable","columns","_row$data$","employee","log","length","elevation","sx","padding","marginTop","marginLeft","marginRight","display","gutterBottom","component","pagination","expandableRows","_c","$RefreshReg$"],"sources":["D:/Work/projects/tools-config-app/frontend/src/screens/SalariesScreen.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {ISalaryData} from \"../types/ISalaryData\";\r\nimport SalariesService from \"../services/SalariesService\";\r\nimport DataTable, {TableColumn} from \"react-data-table-component\";\r\nimport {Divider, Paper, Tooltip, Typography} from \"@mui/material\";\r\n\r\nconst SalariesScreen = () => {\r\n    const navigate = useNavigate();\r\n    const [salaries, setSalaries] = useState<ISalaryData[]>([]);\r\n\r\n    useEffect(() => {\r\n        fetchSalaries();\r\n    }, []);\r\n\r\n    const fetchSalaries = () => {\r\n        SalariesService.getAllSalaries()\r\n            .then((response: any) => {\r\n                setSalaries(response.data);\r\n            })\r\n            .catch((e: Error) => {\r\n                console.error(e);\r\n            })\r\n    }\r\n\r\n    const createTooltipColumn = (\r\n        name: string,\r\n        selector: (row: ISalaryData) => string\r\n    ): TableColumn<ISalaryData> => {\r\n        return {\r\n            name: <Typography variant=\"body1\" color=\"primary\">{name}</Typography>,\r\n            cell: (row: ISalaryData) => (\r\n                <Tooltip title={selector(row)} arrow>\r\n                    <Typography variant=\"body2\" noWrap>\r\n                        {selector(row)}\r\n                    </Typography>\r\n                </Tooltip>\r\n            ),\r\n            sortable: true,\r\n        };\r\n    };\r\n\r\n    const columns: TableColumn<ISalaryData>[] = [\r\n        createTooltipColumn('Name', (row) => row.data[0]?.employee),\r\n        // {\r\n        //     name: <Typography variant=\"body1\" color=\"primary\">Amount</Typography>,\r\n        //     cell: (row: ISalaryData) => (\r\n        //         <Typography variant=\"body2\" noWrap>\r\n        //             {row.amount} {currencyCode}\r\n        //         </Typography>\r\n        //     ),\r\n        //     sortable: true,\r\n        // },\r\n        // {\r\n        //     name: <Typography variant=\"body1\" color=\"primary\">Recurring</Typography>,\r\n        //     cell: (row: ISalaryData) => (\r\n        //         <Typography variant=\"body2\" noWrap>\r\n        //             {row.recurring ? 'Yes' : 'No'}\r\n        //         </Typography>\r\n        //     ),\r\n        //     sortable: true,\r\n        // },\r\n        // {\r\n        //     name: <Typography variant=\"body1\" color=\"primary\">Recurrence Period</Typography>,\r\n        //     selector: row => row.recurrencePeriod,\r\n        //     sortable: true,\r\n        // },\r\n        // {\r\n        //     name: <Typography variant=\"body1\" color=\"primary\">Date</Typography>,\r\n        //     selector: row => row.date,\r\n        //     cell: (row: ISalaryData) => (\r\n        //         <Typography variant=\"caption\">\r\n        //             {format(new Date(row.date), 'PPP p')}\r\n        //         </Typography>\r\n        //     ),\r\n        //     sortable: true,\r\n        // },\r\n        // {\r\n        //     name: <Typography variant=\"body1\" color=\"primary\">Options</Typography>,\r\n        //     cell: (row: ISalaryData) => (\r\n        //         <Box sx={{mt: 1, mb: 1, display: 'flex', flexDirection: 'column', gap: '8px'}}>\r\n        //             <Button\r\n        //                 variant=\"contained\"\r\n        //                 color=\"primary\"\r\n        //                 onClick={() => handleEdit(row)}\r\n        //                 size=\"small\"\r\n        //                 startIcon={<EditIcon/>}\r\n        //             >\r\n        //                 Edit\r\n        //             </Button>\r\n        //             <Button\r\n        //                 variant=\"contained\"\r\n        //                 color=\"primary\"\r\n        //                 onClick={() => handleDelete(row)}\r\n        //                 size=\"small\"\r\n        //                 startIcon={<DeleteIcon/>}\r\n        //             >\r\n        //                 Delete\r\n        //             </Button>\r\n        //         </Box>\r\n        //     ),\r\n        //     style: {\r\n        //         minWidth: '140px',\r\n        //     },\r\n        // }\r\n    ];\r\n\r\n    console.log(salaries);\r\n    console.log(salaries[0].data.length);\r\n\r\n    return (\r\n        <>\r\n            <Paper elevation={3}\r\n                   sx={{padding: 3, marginTop: 3, marginLeft: 'auto', marginRight: 'auto'}}>\r\n\r\n                <Typography variant=\"button\" display=\"block\" gutterBottom>\r\n                    <Typography component=\"span\" sx={{color: \"error.main\"}}>\r\n                        {'No salaries added yet.'}\r\n                    </Typography>\r\n                </Typography>\r\n\r\n                <Divider/>\r\n\r\n                <DataTable\r\n                    key={salaries[0]?.data.length}\r\n                    columns={columns}\r\n                    data={salaries}\r\n                    pagination\r\n                    expandableRows\r\n                    // expandableRowsComponent={ExpandedIncomesDetails}\r\n                />\r\n            </Paper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SalariesScreen;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,SAAQC,WAAW,QAAO,kBAAkB;AAE5C,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,SAAS,MAAqB,4BAA4B;AACjE,SAAQC,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAEC,UAAU,QAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElE,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,UAAA;EACzB,MAAMC,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAgB,EAAE,CAAC;EAE3DD,SAAS,CAAC,MAAM;IACZmB,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,aAAa,GAAGA,CAAA,KAAM;IACxBhB,eAAe,CAACiB,cAAc,CAAC,CAAC,CAC3BC,IAAI,CAAEC,QAAa,IAAK;MACrBJ,WAAW,CAACI,QAAQ,CAACC,IAAI,CAAC;IAC9B,CAAC,CAAC,CACDC,KAAK,CAAEC,CAAQ,IAAK;MACjBC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IACpB,CAAC,CAAC;EACV,CAAC;EAED,MAAMG,mBAAmB,GAAGA,CACxBC,IAAY,EACZC,QAAsC,KACX;IAC3B,OAAO;MACHD,IAAI,eAAEnB,OAAA,CAACF,UAAU;QAACuB,OAAO,EAAC,OAAO;QAACC,KAAK,EAAC,SAAS;QAAAC,QAAA,EAAEJ;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC;MACrEC,IAAI,EAAGC,GAAgB,iBACnB7B,OAAA,CAACH,OAAO;QAACiC,KAAK,EAAEV,QAAQ,CAACS,GAAG,CAAE;QAACE,KAAK;QAAAR,QAAA,eAChCvB,OAAA,CAACF,UAAU;UAACuB,OAAO,EAAC,OAAO;UAACW,MAAM;UAAAT,QAAA,EAC7BH,QAAQ,CAACS,GAAG;QAAC;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CACZ;MACDM,QAAQ,EAAE;IACd,CAAC;EACL,CAAC;EAED,MAAMC,OAAmC,GAAG,CACxChB,mBAAmB,CAAC,MAAM,EAAGW,GAAG;IAAA,IAAAM,UAAA;IAAA,QAAAA,UAAA,GAAKN,GAAG,CAAChB,IAAI,CAAC,CAAC,CAAC,cAAAsB,UAAA,uBAAXA,UAAA,CAAaC,QAAQ;EAAA;EAC1D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA,CACH;EAEDpB,OAAO,CAACqB,GAAG,CAAC9B,QAAQ,CAAC;EACrBS,OAAO,CAACqB,GAAG,CAAC9B,QAAQ,CAAC,CAAC,CAAC,CAACM,IAAI,CAACyB,MAAM,CAAC;EAEpC,oBACItC,OAAA,CAAAE,SAAA;IAAAqB,QAAA,eACIvB,OAAA,CAACJ,KAAK;MAAC2C,SAAS,EAAE,CAAE;MACbC,EAAE,EAAE;QAACC,OAAO,EAAE,CAAC;QAAEC,SAAS,EAAE,CAAC;QAAEC,UAAU,EAAE,MAAM;QAAEC,WAAW,EAAE;MAAM,CAAE;MAAArB,QAAA,gBAE3EvB,OAAA,CAACF,UAAU;QAACuB,OAAO,EAAC,QAAQ;QAACwB,OAAO,EAAC,OAAO;QAACC,YAAY;QAAAvB,QAAA,eACrDvB,OAAA,CAACF,UAAU;UAACiD,SAAS,EAAC,MAAM;UAACP,EAAE,EAAE;YAAClB,KAAK,EAAE;UAAY,CAAE;UAAAC,QAAA,EAClD;QAAwB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAEb3B,OAAA,CAACL,OAAO;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eAEV3B,OAAA,CAACN,SAAS;QAENwC,OAAO,EAAEA,OAAQ;QACjBrB,IAAI,EAAEN,QAAS;QACfyC,UAAU;QACVC,cAAc;QACd;MAAA,IAAA5C,UAAA,GALKE,QAAQ,CAAC,CAAC,CAAC,cAAAF,UAAA,uBAAXA,UAAA,CAAaQ,IAAI,CAACyB,MAAM;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMhC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC,gBACV,CAAC;AAEX,CAAC;AAACvB,EAAA,CA/HID,cAAc;EAAA,QACCX,WAAW;AAAA;AAAA0D,EAAA,GAD1B/C,cAAc;AAiIpB,eAAeA,cAAc;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}